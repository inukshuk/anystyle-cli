#!/usr/bin/env ruby

require 'gli'
require 'anystyle/cli'

include GLI::App
include AnyStyle::CLI

program_desc 'Finds and parses bibliographic references'

version '%s (cli %s, data %s)' % [
  AnyStyle::VERSION, VERSION, AnyStyle::Data::VERSION
]

subcommand_option_handling :normal
arguments :strict

wrap_help_text :verbatim

accept(Array) { |value| value.split(',') }

#config_file '.anystyle'

switch 'verbose',
  desc: 'Print status messages to stderr'

switch ['w', 'overwrite'],
  desc: 'Allow overwriting existing files'

switch 'stdout',
  desc: 'Print results directly to stdout'

flag ['F', 'finder-model'],
  arg_name: 'file',
  desc: 'Set the finder model file'

flag ['P', 'parser-model'],
  arg_name: 'file',
  desc: 'Set the parser model file'

flag 'pdftotext',
  arg_name: 'path',
  desc: 'Set the path for pdftotext'

flag 'pdfinfo',
  arg_name: 'path',
  desc: 'Set the path for pdfinfo'


flag 'adapter',
  default_value: 'ruby',
  arg_name: 'name',
  must_match: %w{ ruby memory gdbm },
  desc: 'Set the dictionary adapter'

flag ['f', 'format'],
  default_value: ['json'],
  arg_name: 'name',
  type: Array,
  must_match: /(bib|csl|ris|json|ref|ttx|txt|xml)(,(bib|csl|ris|json|ref|ttx|txt|xml))*/,
  desc: 'Set the output format'


pre do |opts|
  AnyStyle::Dictionary.defaults[:adapter] = opts[:adapter]

  unless opts[:'finder-model'].nil?
    AnyStyle::Finder.defaults[:model] =
      File.expand_path(opts[:'finder-model'])
  end

  unless opts[:'parser-model'].nil?
    AnyStyle::Parser.defaults[:model] =
      File.expand_path(opts[:'parser-model'])
  end

  unless opts[:pdftotext].nil?
    AnyStyle::Finder.defaults[:pdftotext] =
      opts[:pdftotext]
  end

  unless opts[:pdfinfo].nil?
    AnyStyle::Finder.defaults[:pdfinfo] =
      opts[:pdfinfo]
  end

  AnyStyle
end


desc 'Find and extract references from text documents'
long_desc %{
    This manual page documents the AnyStyle `find' command. AnyStyle `find'
    analyzes PDF or text documents and extracts all references it finds.

    The input argument can be a single PDF or text document, or a folder
    containing multiple documents. The (optional) output argument specifies
    the folder where the results shall be saved; if no output folder is
    specified, results will be saved in the folder containing the input.

    AnyStyle `find' supports the following formats:
        bib     BibTeX (references only);
        csl     CSL/JSON (references only);
        ris     RIS (references only);
        json    AnyStyle JSON (references only);
        ref     One reference per line, suitable for parser input;
        txt     Plain text document;
        ttx     Tagged document format, used for training the finder model;
        xml     References only, XML, suitable for training the parser model.

    You can specify multiple output formats, separated by commas.

    Anlyzing PDF documents currently depends on `pdftotext' which must be
    installed separately.

EXAMPLES
    anystyle -f csl,xml find thesis.pdf

    Extract references from `thesis.pdf' and save them in `thesis.csl' and
    `thesis.xml'.

    anystyle -f bib find --no-layout thesis.pdf bib

    Extract references from `thesis.pdf' in `no-layout' mode (e.g., use this
    if your document uses a multi-column layout) and save them in BibTeX in
    `./bib/thesis.bib'.

    anystyle find --crop 72 thesis.pdf -

    Extract references from `thesis.pdf' cropping away one inch (72pt) from
    each page border and print the results to STDOUT.

    anystyle find --crop 72,28 thesis.pdf -

    Extract references from `thesis.pdf' cropping away one inch (72pt) from
    each page's left and right border, approx. 1cm (28pt) from the top
    and bottom.
}.lstrip

arg :input
arg :output, :optional
command :find do |cmd|
  cmd.switch 'layout',
    default_value: true,
    desc: 'Use layout mode for PDF text extraction'

  cmd.switch 'solo',
    default_value: false,
    desc: 'Include references outside of reference sections'

  cmd.flag ['C', 'crop'],
    arg_name: 'pt',
    type: Array,
    must_match: /\d+(,\d+)?|\d+,\d+(,-?\d+){2}/,
    desc: 'Set cropping boundary for text extraction'

  cmd.action do |opts, params, args|
    Commands::Find.new(opts).run(args, params)
  end
end


desc 'Parse and convert references'
long_desc %{
    This manual page documents the AnyStyle `parse' command. AnyStyle `parse'
    segments references (one per line) and converts them into structured
    formats.

    The input argument can be a single text document containing one full
    reference per line (blank lines will be ignored), or a folder containing
    multiple documents. The (optional) output argument specifies
    the folder where the results shall be saved; if no output folder is
    specified, results will be saved in the folder containing the input.

    AnyStyle `parse' supports the following formats:
        bib     BibTeX (normalized);
        csl     CSL/JSON (normalized);
        json    AnyStyle JSON (normalized);
        ref     One reference per line, suitable for parser input;
        txt     Same as `ref';
        xml     XML, suitable for training the parser model.

    You can specify multiple output formats, separated by commas.

EXAMPLES
    anystyle -f json,xml parse biblio.txt

    Extract references from `biblio.txt' and save them in `biblio.json' and
    `biblio.xml'.

    anystyle --stdout -f csl parse input.txt

    Extract references from `input.txt' and print them to STDOUT in CSL/JSON.
}.lstrip

arg :input
arg :output, :optional
command :parse do |cmd|
  cmd.action do |opts, params, args|
    Commands::Parse.new(opts).run(args, params)
  end
end

desc 'Check tagged documents or references'
long_desc %{
    This manual page documents the AnyStyle `check' command. AnyStyle `check'
    analyzes tagged text documents or references.

    The input argument can be a single TTX or XML document, or a folder
    containing multiple documents.

    AnyStyle `check' supports the following input formats:
        ttx     Tagged document format, used for training the finder model;
        xml     References only, XML, suitable for training the parser model.

EXAMPLES
    anystyle check training-data.xml

    Checks all references in the XML file and prints a report to STDOUT.
}.lstrip

arg :input
command :check do |cmd|
  cmd.action do |opts, params, args|
    Commands::Check.new(opts).run(args, params)
  end
end


desc 'Create a new finder or parser model'
long_desc %{
    This manual page documents the AnyStyle `train' command. AnyStyle `train'
    creates a new finder or parser model based on the supplied training sets.

    The input argument can be a XML document, or a folder containing multiple
    TTX documents.

EXAMPLES
    anystyle train data.xml my-model.mod

    Creates a new parser model based on the XML training set and saves it
    as `my-model.mod'. To use your model use the global `--finder-model'
    or `--parser-model' flags.
}.lstrip

arg :input
arg :output, :optional
command :train do |cmd|
  cmd.action do |opts, params, args|
    Commands::Train.new(opts).run(args, params)
  end
end

desc 'Print license information'
command :license do |cmd|
  cmd.action do
    puts 'AnyStyle.'
    puts 'Copyright (C) 2011-%d Sylvester Keil.' % Time.now.year
    puts <<~EOL

      Wapiti.
      Copyright (C) 2009-2013 CNRS.

      All rights reserved.

      Redistribution and use in source and binary forms, with or without
      modification, are permitted provided that the following conditions are met:

      * Redistributions of source code must retain the above copyright notice, this
        list of conditions and the following disclaimer.

      * Redistributions in binary form must reproduce the above copyright notice,
        this list of conditions and the following disclaimer in the documentation
        and/or other materials provided with the distribution.

      THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER ``AS IS'' AND ANY EXPRESS OR
      IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
      MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO
      EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
      INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
      BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
      DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
      OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
      NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
      EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

    EOL
  end
end

exit run(ARGV)

# vim: syntax=ruby
